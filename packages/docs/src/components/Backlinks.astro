---
import { sql } from "kysely";
import { getBrainDb } from "@braindb/astro";
import type { CollectionEntry } from "astro:content";
interface Props {
  entry: CollectionEntry<"docs">;
}
const { entry } = Astro.props;

const bdb = getBrainDb();
const links = await bdb
  .kysely()
  .selectFrom("links")
  .innerJoin("files", "files.path", "links.source")
  .select(() => [
    "links.source",
    "url",
    "slug",
    sql<string>`data ->> '$.title'`.as("title"),
    sql<boolean>`data ->> '$.draft'`.as("draft"),
  ])
  .where("links.target", "=", `/${entry.id}`)
  .where("links.source", "!=", `/${entry.id}`) // self-links
  .where(
    import.meta.env.DEV ? sql`true` : sql`(draft = false OR draft IS NULL)`
  )
  .distinct()
  .execute();

// TODO: try the same with drizzle, maybe it's easier
---

{
  links.length > 0 && (
    <div class="backlinks">
      <h2>Backlinks</h2>
      <ul>
        {links.map((x) => (
          <li>
            <a href={x.url}>{x.title || x.slug}</a>
          </li>
        ))}
      </ul>
    </div>
  )
}

<style>
  .backlinks {
    padding-top: 1rem;

    ul {
      padding: 0;
      list-style: none;
    }
    a {
      --pad-inline: 0.5rem;
      display: block;
      border-radius: 0.25rem;
      padding-block: 0.25rem;
      padding-inline: var(--pad-inline) var(--pad-inline);
      line-height: 1.25;
    }
  }
</style>
